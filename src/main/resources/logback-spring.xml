<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="60 seconds">

    <!--
        The <include> element is used to include additional configuration files or resources into the current Logback configuration.
        In this case, the resource specified is 'org/springframework/boot/logging/logback/defaults.xml', which is a default configuration provided by Spring Boot.
        This file contains standard Logback settings and configurations that Spring Boot recommends for basic logging functionality.
        By including this resource, you ensure that the default logging behavior and configurations provided by Spring Boot are applied,
        while still allowing you to override or extend them with your own custom configurations defined in this file.
    -->
    <include resource="org/springframework/boot/logging/logback/defaults.xml"/>

    <!--
        The <include> element is used to incorporate additional configuration files or resources into the current Logback configuration.
        In this case, the resource specified is 'org/springframework/boot/logging/logback/console-appender.xml', which provides the configuration for the console appender.
        The console appender is responsible for writing log messages to the console (standard output).
        By including this resource, you are enabling console-based logging with default settings provided by Spring Boot,
        which typically includes configurations for log levels, patterns, and output formats suitable for development and debugging purposes.
        You can customize or extend this configuration in your main Logback configuration file as needed.
    -->
    <include resource="org/springframework/boot/logging/logback/console-appender.xml"/>
    <!--
        The LOG_PATH property defines the base directory for log files.
        It specifies where the log files will be stored on the file system.
        In this configuration, the value is set to 'log', meaning all log files
        will be stored in a directory named 'log' within the current working directory.
    -->
    <property name="LOG_PATH" value="log"/>

    <!--
        The LOG_FILE_NAME property specifies the base name of the log file.
        This name will be used as the prefix for the log files generated by the application.
        In this configuration, the value is set to 'feen-backend', meaning the log files
        will have names starting with 'feen-backend', followed by date, time, or other information
        depending on the appender configuration.
    -->
    <property name="LOG_FILE_NAME" value="feen-backend"/>

    <!--
        The LOG_ERROR_FILE_NAME property defines the base name of the error log file.
        This property is used to specify the prefix for log files that will contain error-level logs.
        In this configuration, the value is set to 'error-feen-backend', indicating that the error log files
        will have names starting with 'error-feen-backend', followed by additional information such as date or time.
        This separate naming helps in distinguishing error logs from other log levels.
    -->
    <property name="LOG_ERROR_FILE_NAME" value="error-feen-backend"/>

    <!--
        The LOG_PATTERN property specifies the pattern for log messages.
        This pattern determines the format in which log messages are written to the log files.
        The value is set to '%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] [%logger{40}] - %msg%n', which includes:
        - %d{yyyy-MM-dd HH:mm:ss.SSS}: Timestamp of the log event in the format "year-month-day hour:minute:second.millisecond"
        - %-5level: Log level (e.g., INFO, DEBUG, ERROR) aligned to a width of 5 characters
        - [%thread]: Thread name that generated the log event
        - [%logger{40}]: Logger name, truncated to 40 characters if necessary
        - - %msg: The actual log message
        - %n: Platform-specific line separator (newline)

        This pattern ensures that log entries are consistent, readable, and contain useful information for debugging and monitoring.
    -->
    <property name="LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] [%logger{40}] - %msg%n"/>

   <springProperty name="LOG_CHANNEL_IDS" source="slack.log-channel-ids"/>
   <springProperty name="ICON_EMOJIS" source="slack.icon-emojis"/>
   <springProperty name="TOKEN" source="slack.report-token"/>
   <springProperty name="USERNAME" source="slack.log-username"/>

    <!--
        The <appender> element defines a RollingFileAppender named "FILE" which writes log messages to a file and supports rolling over to new files based on time or size.
        - name="FILE": The name of this appender. This name is used to reference this appender in other parts of the configuration.
        - class="ch.qos.logback.core.rolling.RollingFileAppender": Specifies the class to be used for this appender, which handles writing logs to files with support for rolling over based on size or time.

        Inside the appender configuration:
          <file>${LOG_PATH}/${LOG_FILE_NAME}.log</file>: Defines the path and base name of the log file. The log file will be created in the directory specified by the LOG_PATH property with the base name from the LOG_FILE_NAME property.

          <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">: Configures the rolling policy to manage how and when the log files roll over.
            - <fileNamePattern>${LOG_PATH}/%d{yyyy-MM, aux}/${LOG_FILE_NAME}.%d{yyyy-MM-dd}.log</fileNamePattern>: Specifies the naming pattern for rolled-over log files, including date-based suffixes. Files will be stored in subdirectories based on month.
            - <maxFileSize>10MB</maxFileSize>: Limits the maximum size of each log file to 10 megabytes before rolling over.
            - <maxHistory>30</maxHistory>: Retains up to 30 historical log files before deleting older ones.
            - <totalSizeCap>5GB</totalSizeCap>: Caps the total size of all archived log files to 5 gigabytes.

          <filter class="ch.qos.logback.classic.filter.LevelFilter">: Filters log messages based on their level.
            - <level>WARN</level>: Specifies that only log messages with a level of WARN or higher are accepted by this appender.
            - <onMatch>ACCEPT</onMatch>: Indicates that matching messages should be accepted and logged.
            - <onMismatch>DENY</onMismatch>: Indicates that non-matching messages should be denied and not logged.

          <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">: Configures how log messages are formatted.
            - <pattern>${LOG_PATTERN}</pattern>: Uses the pattern defined by the LOG_PATTERN property to format log messages.

        This configuration ensures that logs are written to a rolling file with specified size and time-based rolling policies, and that only warnings and more severe log messages are included.
    -->
<!--    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/${LOG_FILE_NAME}.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/%d{yyyy-MM, aux}/${LOG_FILE_NAME}.%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxFileSize>10MB</maxFileSize>
            <maxHistory>30</maxHistory>
            <totalSizeCap>5GB</totalSizeCap>
        </rollingPolicy>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>WARN</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_PATTERN}</pattern>
        </encoder>
    </appender>-->

    <!--
        The <appender> element defines a RollingFileAppender named "FILE_ERROR" which is specifically used for logging error-level messages.
        - name="FILE_ERROR": The name of this appender. This name is used to reference this appender in other parts of the configuration.
        - class="ch.qos.logback.core.rolling.RollingFileAppender": Specifies the class to be used for this appender, which handles writing logs to files with support for rolling over based on size or time.

        Inside the appender configuration:
          <file>${LOG_PATH}/${LOG_ERROR_FILE_NAME}.log</file>: Defines the path and base name of the error log file. The log file will be created in the directory specified by the LOG_PATH property with the base name from the LOG_ERROR_FILE_NAME property.

          <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">: Configures the rolling policy to manage how and when the log files roll over.
            - <fileNamePattern>${LOG_PATH}/%d{yyyy-MM, aux}/${LOG_ERROR_FILE_NAME}.%d{yyyy-MM-dd}.log</fileNamePattern>: Specifies the naming pattern for rolled-over log files, including date-based suffixes. Files will be stored in subdirectories based on month.
            - <maxFileSize>10MB</maxFileSize>: Limits the maximum size of each log file to 10 megabytes before rolling over.
            - <maxHistory>30</maxHistory>: Retains up to 30 historical log files before deleting older ones.
            - <totalSizeCap>5GB</totalSizeCap>: Caps the total size of all archived log files to 5 gigabytes.

          <filter class="ch.qos.logback.classic.filter.LevelFilter">: Filters log messages based on their level.
            - <level>ERROR</level>: Specifies that only log messages with a level of ERROR are accepted by this appender.
            - <onMatch>ACCEPT</onMatch>: Indicates that matching messages should be accepted and logged.
            - <onMismatch>DENY</onMismatch>: Indicates that non-matching messages should be denied and not logged.

          <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">: Configures how log messages are formatted.
            - <pattern>${LOG_PATTERN}</pattern>: Uses the pattern defined by the LOG_PATTERN property to format log messages.

        This configuration ensures that only error-level log messages are written to the file, with logs being rolled over based on size and time, and maintains a specified history and size cap for archived logs.
    -->
<!--    <appender name="FILE_ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/${LOG_ERROR_FILE_NAME}.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/%d{yyyy-MM, aux}/${LOG_ERROR_FILE_NAME}.%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxFileSize>10MB</maxFileSize>
            <maxHistory>30</maxHistory>
            <totalSizeCap>5GB</totalSizeCap>
        </rollingPolicy>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_PATTERN}</pattern>
        </encoder>
    </appender>-->

    <!--
        The <appender> element defines an external appender named "EXTERNAL" which is used to send log messages to Slack.

        - name="EXTERNAL": The name of this appender. This name is used to reference this appender in other parts of the configuration.
        - class="com.fleencorp.feen.appender.SlackAppender": Specifies the class to be used for this appender, which sends log messages to a Slack channel via the Slack API.

        Inside the appender configuration:
          <token>${TOKEN}</token>: Defines the Slack API token used for authentication. This token is required for the appender to post messages to Slack. It should be securely managed and kept confidential.
          <username>${USERNAME}</username>: Specifies the username that will appear as the sender of the log messages in Slack. This is typically a bot or application name.
          <iconEmojis>${ICON_EMOJIS}</iconEmojis>: Sets the emoji icons that will be used as the avatar for the messages posted to Slack. This helps in visually identifying messages from this appender.
          <channelIds>${LOG_CHANNEL_IDS}</channelIds>: Lists the Slack channel IDs where the log messages will be sent. Multiple channel IDs can be specified if the logs need to be sent to more than one channel.

        This configuration enables sending log messages to Slack, providing real-time notifications and alerts directly within your Slack workspace.
    -->
<!--    <appender name="EXTERNAL" class="com.fleencorp.feen.appender.SlackAppender">-->
<!--        <token>${TOKEN}</token>-->
<!--        <username>${USERNAME}</username>-->
<!--        <iconEmojis>${ICON_EMOJIS}</iconEmojis>-->
<!--        <channelIds>${LOG_CHANNEL_IDS}</channelIds>-->
<!--    </appender>-->

    <!--
        The <appender> element defines an asynchronous appender named "ASYNC_EXTERNAL" which is used to handle log messages asynchronously, improving performance by offloading logging operations.
        - name="ASYNC_EXTERNAL": The name of this appender. This name is used to reference this appender in other parts of the configuration.
        - class="ch.qos.logback.classic.AsyncAppender": Specifies the class for this appender, which processes log messages asynchronously to reduce the performance impact on the application.

        Inside the appender configuration:
          <appender-ref ref="EXTERNAL" />: References the "EXTERNAL" appender, which sends log messages to Slack. This means that the asynchronous appender will delegate its logging tasks to the "EXTERNAL" appender.

          <filter class="ch.qos.logback.classic.filter.ThresholdFilter">: Filters log messages based on their level before they are passed to the "EXTERNAL" appender.
            - <level>INFO</level>: Specifies that only log messages with a level of INFO or higher are processed by this appender. Messages below this level are filtered out and not sent to the "EXTERNAL" appender.

        This configuration allows log messages to be processed asynchronously, reducing the impact on the application's performance, and ensures that only messages at the INFO level or higher are sent to Slack.
    -->

    <appender name="ASYNC_EXTERNAL" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="EXTERNAL" />
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
    </appender>

    <!--
        The <root> element configures the root logger for the application. The root logger is the default logger used by all loggers unless overridden by specific configurations.
        - level="INFO": Sets the default logging level to INFO for the root logger. This means that log messages with a level of INFO or higher (e.g., WARN, ERROR) will be logged, while lower-level messages (e.g., DEBUG, TRACE) will be ignored.

        Inside the root logger configuration:

          <springProfile name="default, local">: Specifies configuration for the default and local Spring profiles. Loggers associated with these profiles will use the appenders defined within this block.
            - <appender-ref ref="FILE" />: References the "FILE" appender, which writes log messages to a file.
            - <appender-ref ref="FILE_ERROR" />: References the "FILE_ERROR" appender, which handles error-level log messages separately.
            - <appender-ref ref="CONSOLE" />: References the "CONSOLE" appender, which writes log messages to the console.
            - <appender-ref ref="ASYNC_EXTERNAL"/>: References the "ASYNC_EXTERNAL" appender, which sends log messages asynchronously to Slack.

          <springProfile name="dev">: Specifies configuration for the "dev" Spring profile. Loggers associated with the "dev" profile will use the appenders defined within this block.
            - <appender-ref ref="CONSOLE"/>: References the "CONSOLE" appender for logging to the console.
            - <appender-ref ref="FILE" />: References the "FILE" appender for logging to a file.
            - <appender-ref ref="ASYNC_EXTERNAL"/>: References the "ASYNC_EXTERNAL" appender for asynchronous logging to Slack.

          <springProfile name="prod">: Specifies configuration for the "prod" Spring profile. Loggers associated with the "prod" profile will use the appenders defined within this block.
            - <appender-ref ref="CONSOLE"/>: References the "CONSOLE" appender for logging to the console.
            - <appender-ref ref="FILE" />: References the "FILE" appender for logging to a file.
            - <appender-ref ref="ASYNC_EXTERNAL"/>: References the "ASYNC_EXTERNAL" appender for asynchronous logging to Slack.

        This configuration ensures that log messages are routed to the appropriate appenders based on the active Spring profile, allowing for different logging setups in development, local, and production environments.
    -->
    <root level="INFO">
        <springProfile name="default, local">
<!--            <appender-ref ref="FILE" />
            <appender-ref ref="FILE_ERROR" />-->
            <appender-ref ref="CONSOLE" />
            <appender-ref ref="ASYNC_EXTERNAL"/>
        </springProfile>

        <springProfile name="dev">
            <appender-ref ref="CONSOLE"/>
<!--            <appender-ref ref="FILE" />-->
            <appender-ref ref="ASYNC_EXTERNAL"/>
        </springProfile>

        <springProfile name="prod">
            <appender-ref ref="CONSOLE"/>
<!--            <appender-ref ref="FILE" />-->
            <appender-ref ref="ASYNC_EXTERNAL"/>
        </springProfile>
    </root>
</configuration>













<!--
    <a href="https://velog.io/@juhyeon1114/Spring-logback-spring.xml%EB%A5%BC-%ED%86%B5%ED%95%9C-%EB%A1%9C%EA%B7%B8-%EC%B5%9C%EC%A0%81%ED%99%94">
        [Spring] Logging optimization through logback-spring.xml</a>

    <a href="https://velog.io/@jaeygun/spring-boot-logback-%EC%84%A4%EC%A0%95">
        spring boot logback configuration</a>

     <a href="https://velog.io/@kjy0302014/Spring-Boot-LogBack-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0">
        Applying Spring Boot LogBack </a>

     <a href="https://velog.io/@jihukimme/Spring-Boot-Logback%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%A1%9C%EA%B7%B8%EA%B4%80%EB%A6%AC">
        Log management using Spring Boot and Logback</a>

     <a href="https://velog.io/@hameee/Spring-Boot-SLF4J%EC%9C%BC%EB%A1%9C-%EB%A1%9C%EA%B9%85%ED%95%98%EA%B8%B0-Logback">
         [Spring Boot] Logging with SLF4J - Logback</a>

     <a href="https://velog.io/@lunatic1702/LogBack-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0SpringBootMySqlmybatisyml">
        Setting up LogBack (SpringBoot,MySql,mybatis,yml)</a>

     <a href="https://velog.io/@choihuk/logback%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%98%EC%97%AC-%EB%A1%9C%EA%B7%B8%EB%A5%BC-json-%ED%98%95%EC%8B%9D%EC%9C%BC%EB%A1%9C-%ED%8C%8C%EC%8B%B1%ED%95%98%EA%B8%B0-%EB%A1%9C%EA%B7%B8-%EC%8B%9C%EC%8A%A4%ED%85%9C-3">
         Parsing logs into json format using logback [Log System 3]</a>

     <a href="https://velog.io/@gehwan96/logback-%EC%84%A4%EC%A0%95">
        Let's learn about Spring's logging structure and logback.</a>

     <a href="https://be-student.tistory.com/90">
        How to monitor error logs generated in Spring with Slack</a>

     <a href="https://forl.tistory.com/134">
       Receiving errors in Slack in a Sentry + logback + SpringBoot environment</a>

     <a href="https://newwisdom.tistory.com/80">
        Logback and Logging Strategies</a>

     <a href="https://bbbicb.tistory.com/52">
        SpringBoot profile logback</a>

     <a href="https://kth990303.tistory.com/445">
        [Spring] Let's handle logback logging strategy and sensitive information masking log processing</a>

     <a href="https://velog.io/@woosim34/Springboot-Logback-%EC%84%A4%EC%A0%95%ED%95%B4%EB%B3%B4%EA%B8%B0">
        Configuring Logback in Springboot (logback-spring.xml)</a>

     <a href="https://velog.io/@appti/Spring-Profile%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%A1%9C%EA%B7%B8-%EC%84%A4%EC%A0%95">
        Logback configuration using Spring Profile combination</a>

     <a href="https://velog.io/@haerong22/Spring-%EC%8A%AC%EB%9E%99%EC%97%90-%EB%A1%9C%EA%B7%B8-%EB%82%A8%EA%B8%B0%EA%B8%B0">
        [Springboot] Leave a log with Slack (Logback)</a>
 -->